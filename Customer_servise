enum Состояние_менеджера {Свободен, Занят}
enum Состояние_инженера {Свободен, Занят}
enum Состояние_курьера {Свободен, Занят}
enum Состояние_заявки {Ожидает, Распределяется, Распределена, Обрабатывается, Обработана, Выполнена}
enum Деталь {Не_определено, Заменяется, Доставляется, Заменена, Доставлена}
type Менеджер {
	Состояние_менеджера состояние_менеджера
}
type Сервисный_инженер{
	Состояние_инженера состояние_инженера
}
type Курьер {
	Состояние_курьера состояние_курьера
}
type Заявка{
	Состояние_заявки состояние_заявки;
	Деталь деталь;
}
type Сервисные_службы {
	int количество_в_очереди;
	int количество_обслуженных;	
	int количество_отремонтированных
	int количество_доставленных
}

resource сервисная_служба = Сервисные_службы.create(0,0,0,0);

resource менеджер1 = Менеджер.create(Состояние_менеджера.Свободен)
resource менеджер2 = Менеджер.create(Состояние_менеджера.Свободен)
resource менеджер3 = Менеджер.create(Состояние_менеджера.Свободен)

resource курьер1 = Курьер.create(Состояние_курьера.Свободен)
resource курьер2 = Курьер.create(Состояние_курьера.Свободен)
resource курьер3 = Курьер.create(Состояние_курьера.Свободен)

resource инженер1 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер2 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер3 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер4 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер5 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер6 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер7 = Сервисный_инженер.create(Состояние_инженера.Свободен)
resource инженер8 = Сервисный_инженер.create(Состояние_инженера.Свободен)


event Событие_поступления_заявки() {
	var заявка = Заявка.create(Состояние_заявки.Ожидает,Деталь.Не_определено);
	Событие_поступления_заявки.plan(currentTime + интервал_поступления.next());
	сервисная_служба.количество_в_очереди = сервисная_служба.количество_в_очереди +1;
	
}

operation Обслуживание_заявки() {
	relevant _Сервисная_служба = сервисная_служба.onlyif[ количество_в_очереди > 0];
	relevant _Заявка = Заявка.accessible.filter[состояние_заявки == Состояние_заявки.Ожидает && деталь == Деталь.Не_определено].any;
	relevant _Менеджер = Менеджер.accessible.filter[состояние_менеджера == Состояние_менеджера.Свободен].any;

		set duration() {
			длительность_обработки_заявки.next 
		}

		set begin() {
			_Сервисная_служба.количество_в_очереди=_Сервисная_служба.количество_в_очереди -1;
			_Менеджер.состояние_менеджера = Состояние_менеджера.Занят;
			_Заявка.состояние_заявки = Состояние_заявки.Распределяется;
			
		}

		set end() {
		 	_Сервисная_служба.количество_обслуженных =  _Сервисная_служба.количество_обслуженных + 1;
		 	_Менеджер.состояние_менеджера = Состояние_менеджера.Свободен;
			_Заявка.состояние_заявки = Состояние_заявки.Распределена;
			_Заявка.деталь = генератор.next
		}

		
}
operation Ремонт_оборудования() {
	relevant _Сервисная_служба = сервисная_служба.onlyif[ количество_обслуженных > 0 ];
	relevant _Заявка = Заявка.accessible.filter[ состояние_заявки == Состояние_заявки.Распределена && деталь == Деталь.Заменяется ].any;
	relevant _Сервисный_инженер = Сервисный_инженер.accessible.filter[ состояние_инженера == Состояние_инженера.Свободен ].any;
	set duration() {
		длительность_ремонта.next
	}
	set begin() {
			_Сервисная_служба.количество_обслуженных=_Сервисная_служба.количество_обслуженных -1;
			_Сервисный_инженер.состояние_инженера = Состояние_инженера.Занят;
			_Заявка.состояние_заявки = Состояние_заявки.Обрабатывается;		
	}
	set end(){
		_Сервисная_служба.количество_отремонтированных =  _Сервисная_служба.количество_отремонтированных + 1;
		_Сервисный_инженер.состояние_инженера = Состояние_инженера.Свободен;
		_Заявка.состояние_заявки = Состояние_заявки.Выполнена;
		_Заявка.деталь = Деталь.Заменена;
	}
}

operation Доставка_деталей() {
	relevant _Сервисная_служба = сервисная_служба.onlyif[ количество_обслуженных > 0 ];
	relevant _Заявка = Заявка.accessible.filter[ состояние_заявки == Состояние_заявки.Распределена && деталь == Деталь.Доставляется ].any;
	relevant _Курьер = Курьер.accessible.filter[ состояние_курьера == Состояние_курьера.Свободен ].any;
	set duration() {
		длительность_доставки.next
	}
	set begin() {
			_Сервисная_служба.количество_обслуженных=_Сервисная_служба.количество_обслуженных -1;
			_Курьер.состояние_курьера = Состояние_курьера.Занят;
			_Заявка.состояние_заявки = Состояние_заявки.Обрабатывается;		
	}
	set end(){
		_Сервисная_служба.количество_доставленных =  _Сервисная_служба.количество_доставленных + 1;
		_Курьер.состояние_курьера = Состояние_курьера.Свободен;
		_Заявка.состояние_заявки = Состояние_заявки.Выполнена;
		_Заявка.деталь = Деталь.Доставлена;
	}
}
logic Model {
	activity обработка = new Activity(Обслуживание_заявки.create())
	activity ремонт = new Activity(Ремонт_оборудования.create())
	activity доставка = new Activity(Доставка_деталей.create())
}

sequence интервал_поступления = new Exponential(123456789, 1/15.0);
sequence длительность_обработки_заявки = new Uniform(123456789, 20, 40);
sequence длительность_доставки = new Uniform(123456789, 60, 90);
sequence длительность_ремонта = new Uniform(123456789, 120, 360);
sequence генератор = new DiscreteHistogram<Деталь>(1234567,
    #[Деталь.Заменяется -> 7.0, Деталь.Доставляется -> 3.0]);
    
    set init() {
	Событие_поступления_заявки.plan(currentTime + интервал_поступления.next());
}

 	set terminateCondition() {
	return currentTime >= 7 * 12 * 60;
	}
	
resultType Занятость_менеджера1<Состояние_менеджера>(){
	set evaluate() {
		return менеджер1.состояние_менеджера;
	}
} 
resultType Занятость_менеджера2<Состояние_менеджера>(){
	set evaluate() {
		return менеджер2.состояние_менеджера;
	}
} 	
resultType Занятость_менеджера3<Состояние_менеджера>(){
	set evaluate() {
		return менеджер3.состояние_менеджера;
	}
} 
resultType Занятость_инженера1<Состояние_инженера>(){
	set evaluate() {
		return инженер1.состояние_инженера;
	}
} 
resultType Занятость_инженера2<Состояние_инженера>(){
	set evaluate() {
		return инженер2.состояние_инженера;
	}
} 
resultType Занятость_инженера3<Состояние_инженера>(){
	set evaluate() {
		return инженер3.состояние_инженера;
	}
} 
resultType Занятость_инженера4<Состояние_инженера>(){
	set evaluate() {
		return инженер4.состояние_инженера;
	}
} 
resultType Занятость_инженера5<Состояние_инженера>(){
	set evaluate() {
		return инженер5.состояние_инженера;
	}
} 
resultType Занятость_инженера6<Состояние_инженера>(){
	set evaluate() {
		return инженер6.состояние_инженера;
	}
} 
resultType Занятость_инженера7<Состояние_инженера>(){
	set evaluate() {
		return инженер7.состояние_инженера;
	}
} 
resultType Занятость_инженера8<Состояние_инженера>(){
	set evaluate() {
		return инженер8.состояние_инженера;
	}
} 
resultType Занятость_курьера1<Состояние_курьера>(){
	set evaluate() {
		return курьер1.состояние_курьера;
	}
} 
resultType Занятость_курьера2<Состояние_курьера>(){
	set evaluate() {
		return курьер2.состояние_курьера;
	}
} 
resultType Занятость_курьера3<Состояние_курьера>(){
	set evaluate() {
		return курьер3.состояние_курьера;
	}
} 
result Занятость_менеджера1 = new Занятость_менеджера1();
result Занятость_менеджера2 = new Занятость_менеджера2();
result Занятость_менеджера3 = new Занятость_менеджера3();

result Занятость_инеженра1 = new Занятость_инженера1();
result Занятость_инеженра2 = new Занятость_инженера2();
result Занятость_инеженра3 = new Занятость_инженера3();
result Занятость_инеженра4 = new Занятость_инженера4();
result Занятость_инеженра5 = new Занятость_инженера5();
result Занятость_инеженра6 = new Занятость_инженера6();
result Занятость_инеженра7 = new Занятость_инженера7();
result Занятость_инеженра8 = new Занятость_инженера8();

result Занятость_курьера1 = new Занятость_курьера1();
result Занятость_курьера2 = new Занятость_курьера2();
result Занятость_курьера3 = new Занятость_курьера3();

result Длина_очереди = new Value[сервисная_служба.количество_в_очереди];
result Оставшиеся_заявки = new Value[сервисная_служба.количество_обслуженных];
result Всего_выполнено = new Value[сервисная_служба.количество_доставленных + сервисная_служба.количество_отремонтированных];
result Пропускная_способность = new Value[(сервисная_служба.количество_доставленных + сервисная_служба.количество_отремонтированных)/currentTime * 60];
